// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String   @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, providerAccountId])
}

model User {
  id                   String                @id @default(uuid())
  username             String?               @unique
  accountVerified      Boolean               @default(false)
  password             String?
  lastLogin            DateTime?
  isActive             Boolean               @default(true)
  profileUpdated       Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  accounts             Account[]
  accountVerifications AccountVerification[]
  person               Person?
  patientProfile       PatientProfile?
}

model Person {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], onDelete: Cascade, references: [id])
  firstName       String?
  lastName        String?
  email           String?   @unique
  phoneNumber     String?   @unique
  gender          Gender    @default(Unknown)
  image           String?
  dateOfBirth     DateTime?
  county          String?
  constituency    String?
  maritalStatus   String?
  primaryLanguage String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PatientProfile {
  id             String                         @id @default(uuid())
  userId         String                         @unique
  user           User                           @relation(fields: [userId], onDelete: Cascade, references: [id])
  bloodGroup     String?
  weight         String?
  height         String?
  educationLevel String?
  occupation     String?
  allergies      PatientProfileAllergy[]
  chronics       PatientProfileChronicIllness[]
  disabilities   PatientProfileDisability[]
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
}

model PatientProfileAllergy {
  id               String         @id @default(uuid())
  patientProfileId String
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
  alergy           String

  @@unique([alergy, patientProfileId])
}

model PatientProfileChronicIllness {
  id               String         @id @default(uuid())
  patientProfileId String
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
  chronicIllness   String

  @@unique([chronicIllness, patientProfileId])
}

model PatientProfileDisability {
  id               String         @id @default(uuid())
  patientProfileId String
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
  disability       String

  @@unique([disability, patientProfileId])
}

model AccountVerification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], onDelete: Cascade, references: [id])
  otp       String
  expires   DateTime
  verified  Boolean  @default(false)
  extras    String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  Male
  Female
  Unknown
}
